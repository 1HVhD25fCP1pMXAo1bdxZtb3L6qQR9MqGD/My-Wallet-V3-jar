package info.blockchain.wallet.metadata;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import info.blockchain.BlockchainFramework;
import info.blockchain.api.MetadataEndpoints;
import info.blockchain.wallet.exceptions.SharedMetadataConnectionException;
import info.blockchain.wallet.exceptions.ValidationException;
import info.blockchain.wallet.metadata.data.Auth;
import info.blockchain.wallet.metadata.data.Invitation;
import info.blockchain.wallet.metadata.data.Message;
import info.blockchain.wallet.metadata.data.Trusted;
import info.blockchain.wallet.util.MetadataUtil;

import org.bitcoinj.core.ECKey;
import org.bitcoinj.crypto.DeterministicKey;
import org.bitcoinj.params.MainNetParams;
import org.spongycastle.util.encoders.Base64;

import java.io.IOException;
import java.security.SignatureException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Response;


public class SharedMetadata {

    String token;

    MetadataEndpoints endpoints;
    String address;
    DeterministicKey node;

    public SharedMetadata() {
        this.endpoints = BlockchainFramework
                .getRetrofitApiInstance()
                .create(MetadataEndpoints.class);
    }

    public void setEndpoints(MetadataEndpoints endpoints) {
        this.endpoints = endpoints;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setNode(DeterministicKey node) {
        this.node = node;
    }

    public DeterministicKey getNode() {
        return node;
    }

    public String getAddress() {
        return this.address;
    }

    public String getXpub() {
        return node.serializePubB58(MainNetParams.get());
    }

    /**
     * Do auth challenge
     */
    public void authorize() throws SharedMetadataConnectionException, IOException {

        if(token == null || !isValidToken(token)) {
            token = getToken();
        }
    }

    private boolean isValidToken(String token) throws IOException {

        try {
            String tokenParamsJsonB64 = new String(token.split("\\.")[1] + "=");
            String tokenParamsJson = new String(Base64.decode(tokenParamsJsonB64.getBytes("utf-8")));

            JsonFactory factory = new JsonFactory();

            ObjectMapper mapper = new ObjectMapper(factory);
            JsonNode rootNode = mapper.readTree(tokenParamsJson);

            long expDate = rootNode.get("exp").asLong() * 1000;
            long now = System.currentTimeMillis();

            return now < expDate;

        } catch (Exception e) {
            return false;
        }
    }

    /**
     * Get nonce generated by the server (auth challenge).
     */
    private String getNonce() throws SharedMetadataConnectionException, IOException {

        Call<Auth> response = endpoints.getNonce();

        Response<Auth> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body().getNonce();
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Get JSON Web Token if signed nonce is correct. Signed.
     */
    private String getToken() throws SharedMetadataConnectionException, IOException {

        String nonce = getNonce();
        String sig = node.signMessage(nonce);

        HashMap<String, String> map = new HashMap<>();
        map.put("mdid", address);
        map.put("signature", sig);
        map.put("nonce", nonce);
        Call<Auth> response = endpoints.getToken(map);

        Response<Auth> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body().getToken();
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Get list of all trusted MDIDs. Authenticated.
     */
    public Trusted getTrustedList() throws SharedMetadataConnectionException, IOException {

        authorize();
        Call<Trusted> response = endpoints.getTrustedList("Bearer " + token);

        Response<Trusted> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body();
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Check if a contact is on trusted list of mdid. Authenticated.
     */
    public boolean getTrusted(String mdid) throws SharedMetadataConnectionException, IOException {

        authorize();
        Call<Trusted> response = endpoints.getTrusted("Bearer " + token, mdid);

        Response<Trusted> exe = response.execute();

        if (exe.isSuccessful()) {
            return Arrays.asList(exe.body().getContacts()).contains(mdid);
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Add a contact to trusted list of mdid. Authenticated.
     */
    public boolean addTrusted(String mdid) throws SharedMetadataConnectionException, IOException {

        authorize();
        Call<Trusted> response = endpoints.putTrusted("Bearer " + token, mdid);

        Response<Trusted> exe = response.execute();

        if (exe.isSuccessful()) {
            return mdid.equals(exe.body().getContact());
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Delete a contact from trusted list of mdid. Authenticated.
     */
    public boolean deleteTrusted(String mdid) throws SharedMetadataConnectionException, IOException {

        authorize();
        Call<ResponseBody> response = endpoints.deleteTrusted("Bearer " + token, mdid);

        Response<ResponseBody> exe = response.execute();

        if (exe.isSuccessful()) {
            return true;
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Add new shared metadata entry. Signed. Authenticated.
     */
    public Message postMessage(String mdidRecipient, String b64Msg, int type) throws Exception {

        if(mdidRecipient == null) throw new Exception("Recipient mdid null.");

        String signature = node.signMessage(b64Msg);

        Message request = new Message();
        request.setRecipient(mdidRecipient);
        request.setSender(getAddress());
        request.setType(type);
        request.setPayload(b64Msg);
        request.setSignature(signature);

        authorize();
        Call<Message> response = endpoints.postMessage("Bearer " + token, request);

        Response<Message> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body();
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }

    }

    /**
     * Get messages sent to my MDID. Authenticated.
     */
    public List<Message> getMessages(boolean onlyProcessed) throws Exception {

        authorize();
        Call<List<Message>> response = endpoints.getMessages("Bearer " + token, onlyProcessed);

        Response<List<Message>> exe = response.execute();

        if (exe.isSuccessful()) {

            for (Message msg : exe.body()) {
                validateSignature(msg);
            }

            return exe.body();
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Get messages sent to my MDID. Authenticated.
     */
    public List<Message> getMessages(String lastMessageId) throws Exception {

        authorize();
        Call<List<Message>> response = endpoints.getMessages("Bearer " + token, lastMessageId);

        Response<List<Message>> exe = response.execute();

        if (exe.isSuccessful()) {

            for (Message msg : exe.body()) {
                validateSignature(msg);
            }

            return exe.body();
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Get message from message id. Authenticated.
     */
    public Message getMessage(String messageId) throws Exception {

        authorize();
        Call<Message> response = endpoints.getMessage("Bearer " + token, messageId);

        Response<Message> exe = response.execute();

        if (exe.isSuccessful()) {

            Message msg = exe.body();
            validateSignature(msg);
            return msg;
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    public void processMessage(String messageId) throws Exception{

        authorize();
        Call<Void> response = endpoints.processMessage("Bearer " + token, messageId);

        Response<Void> exe = response.execute();

        if (!exe.isSuccessful()) {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    private void validateSignature(Message msg) throws ValidationException, SignatureException {

        ECKey key = ECKey.signedMessageToKey(
                msg.getPayload(),
                msg.getSignature());

        String senderAddress = msg.getSender();
        String addressFromSignature = key.toAddress(MainNetParams.get()).toString();

        if (!senderAddress.equals(addressFromSignature)) {
            throw new ValidationException("Signature is not well-formed");
        }
    }

    /**
     * Obtains a one-time UUID for key sharing Gets MDID of sender from one-time UUID
     */
    public Invitation createInvitation() throws IOException, SharedMetadataConnectionException {

        authorize();
        Call<Invitation> response = endpoints.postShare("Bearer " + token);

        Response<Invitation> exe = response.execute();

        if (exe.isSuccessful()) {
            Invitation invitation = exe.body();
            return invitation;
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    public Invitation acceptInvitation(String inviteId) throws IOException, SharedMetadataConnectionException {

        authorize();
        Call<Invitation> response = endpoints.postToShare("Bearer " + token, inviteId);

        Response<Invitation> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body();
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Gets MDID of sender from one-time UUID
     */
    public String readInvitation(String uuid) throws SharedMetadataConnectionException, IOException {

        authorize();
        Call<Invitation> response = endpoints.getShare("Bearer " + token, uuid);

        Response<Invitation> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body().getContact();
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    /**
     * Deletes one-time UUID
     */
    public boolean deleteInvitation(String uuid) throws SharedMetadataConnectionException, IOException {

        authorize();
        Call<Invitation> response = endpoints.deleteShare("Bearer " + token, uuid);

        Response<Invitation> exe = response.execute();

        if (exe.isSuccessful()) {
            return true;
        } else {
            throw new SharedMetadataConnectionException(exe.code() + " " + exe.message());
        }
    }

    public String encryptFor(String xpub, String payload) throws Exception {
        byte[] encryptedMessage = MetadataUtil.encryptFor(getNode(), xpub, payload);
        return new String(encryptedMessage);
    }

    public String decryptFrom(String xpub, String payload) throws Exception{
        return MetadataUtil.decryptFrom(getNode(), xpub, payload);
    }

    public static class Builder{

        //Required
        private DeterministicKey sharedMetaDataHDNode;

        public Builder(DeterministicKey sharedMetaDataHDNode){
            this.sharedMetaDataHDNode = sharedMetaDataHDNode;
        }

        /**
         * purpose' / type' / 0' : https://meta.blockchain.info/{address} - signature used to authorize
         * purpose' / type' / 1' : sha256(private key) used as 256 bit AES key
         */
        public SharedMetadata build() throws Exception {

//            DeterministicKey sharedMetaDataHDNode = MetadataUtil.deriveHardened(rootNode, MetadataUtil.getPurposeMdid());

            SharedMetadata metadata = new SharedMetadata();
            metadata.setAddress(sharedMetaDataHDNode.toAddress(MainNetParams.get()).toString());
            metadata.setNode(sharedMetaDataHDNode);

            return metadata;
        }
    }
}